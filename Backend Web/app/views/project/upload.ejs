<%include ../../common/header.ejs%>
<link rel="stylesheet" type="text/css" href="css/common/customForm.css">
<link rel="stylesheet" type="text/css" href="css/common/dragAndDrop.css">

<!-- CONTENT -->
<div class="container">

    <br><br>

    <div class="divCenter">
        <h3>Gerando Autorização de Pagamento do Anexo 7 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h3>
        <br>
        <form action="javascript:readFile()" method="POST">
            <div class="item-inner">
                <div class="item-content">
                    <div class="file-upload"> 
                        <label style="cursor: pointer;" for="file_upload"> <img src="" alt="" class="uploaded-file">
                            <div class="h-100">
                                <div class="dplay-tbl">
                                    <div class="dplay-tbl-cell"> <i class="fa fa-cloud-upload"></i>
                                        <h5><b>Drag and Drop o Anexo 7</b></h5>
                                        <h6><i class="fas fa-cloud-upload-alt"></i></h6>
                                        <h6 class="mt-10 mb-70">Ou clique aqui</h6>
                                    </div>
                                </div>
                            </div>
                            <input data-required="file" type="file" name="anexo7" id="anexo7" class="file-input" accept=".csv" value="" >
                        </label> 
                    </div>
                </div>
            </div>

            <!-- input  -->
            <div class="form-group">
                <label><i class="fas fa-calendar-check"></i> N° de autorizações do Anexo 7</label>
                <input type="number" name="anexo7Length" id="anexo7Length" class="form-control" required>
            </div>

            <!-- dropdown  -->
            <div class="form-group">
                <label><i class="fas fa-hand-holding-usd"></i> Fonte Pagadora</label>
                <br>
                <select class="form-control single" name="fontePagadora"
                    id="fontePagadora" multiple="multiple" required>
                    <option value="IBC - Instituto Brasileiro de Cidadania">IBC - Instituto Brasileiro de Cidadania</option>
                </select>
            </div>

            <!-- multi dropdown -->
            <div class="form-group">
                <label><i class="fas fa-users"></i> Responsável Financeiro</label>
                <br>
                <select class="form-control single" name="financeiro"
                    id="financeiro" multiple="multiple" required>
                    <option value="Fernando Athayde Filho">Fernando Athayde Filho</option>
                    <option value="João Bento Coutinho Junior">João Bento Coutinho Junior</option>
                    <option value="Joice da Silva Fernandes">Joice da Silva Fernandes</option>
                    <option value="Marcelo Louback da Cunha">Marcelo Louback da Cunha</option>
                </select>
            </div>

            <!-- multi dropdown -->
            <div class="form-group">
                <label><i class="fas fa-users"></i> Responsável Administrativo</label>
                <br>
                <select class="form-control single" name="administrativo"
                    id="administrativo" multiple="multiple" required>
                    <option value="Fernando Athayde Filho">Fernando Athayde Filho</option>
                    <option value="João Bento Coutinho Junior">João Bento Coutinho Junior</option>
                    <option value="Joice da Silva Fernandes">Joice da Silva Fernandes</option>
                    <option value="Marcelo Louback da Cunha">Marcelo Louback da Cunha</option>
                </select>
            </div>

            <!-- multi dropdown -->
            <div class="form-group">
                <label><i class="fas fa-users"></i> Responsável Presidente</label>
                <br>
                <select class="form-control single" name="presidente" onchange="clearGestao();"
                    id="presidente" multiple="multiple" >
                    <option value="Fernando Athayde Filho">Fernando Athayde Filho</option>
                    <option value="João Bento Coutinho Junior">João Bento Coutinho Junior</option>
                    <option value="Joice da Silva Fernandes">Joice da Silva Fernandes</option>
                    <option value="Marcelo Louback da Cunha">Marcelo Louback da Cunha</option>
                </select>
            </div>

            <!-- multi dropdown -->
            <div class="form-group">
                <label><i class="fas fa-users"></i> Responsável Gestão</label>
                <br>
                <select class="form-control single" name="gestao" onchange="clearPresidente();"
                    id="gestao" multiple="multiple" >
                    <option value="Fernando Athayde Filho">Fernando Athayde Filho</option>
                    <option value="João Bento Coutinho Junior">João Bento Coutinho Junior</option>
                    <option value="Joice da Silva Fernandes">Joice da Silva Fernandes</option>
                    <option value="Marcelo Louback da Cunha">Marcelo Louback da Cunha</option>
                </select>
            </div>

            <button class="btn btn-primary btnLeft" type="submit">Confirmar</button>
        </form>
    </div>

    <br>
    <br>
</div>
<!-- /CONTENT -->

<%include ../../common/footer.ejs%>

<script>
/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável executar todas as rotinas iniciais|
     * |da página assim que ela é carregada.                 |
     * =======================================================
     */
    window.onload = () => {
        /*Chamada da função que busca as permissões do usuário.*/
        getPermissions("Gerar Autorizações de Pagamentos do Anexo 7", "fa-copy");
    };
    $(document).ready(function () {

        /*Chamada da função que ativa a side bar.*/
        $('#sidebarCollapse').on('click', function () {
            $('#sidebar').toggleClass('active');
        });
        
        /*Chamada da função que ativa os dropdowns.*/
        $('.single').select2({
            maximumSelectionLength: 1
        });
    });
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por limpar o campo de responsável |
     * |pela gestão.                                         |
     * =======================================================
     */ 
    function clearGestao() {
        document.getElementById("gestao").value = "";
        $('#gestao').val(null)
        return;
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por limpar o campo de responsável |
     * |presidente.                                          |
     * =======================================================
     */
    function clearPresidente() {
        document.getElementById("presidente").value = "";
        $('#presidente').val(null)
        return;
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por realizar a conversão dos dados|
     * |lidos no arquivo csv, para o formato de JSON.        |
     * =======================================================
     */
    function csvJSON(csv){
        
        const lines = csv.split("\n");       /*Atribuição de todas as linhas csv em um array.*/
        const headers = lines[0].split(";"); /*Atribuição de todos os headers do csv em um array.*/

        let result = []; /*Variável que conterá todas as JSONs das respectivas linhas do csv.*/

        /**
         * Loop responsável por realizar a leitura de cada linha, criar uma JSON
         * da respectiva linha, e atribui-la ao array de retorno.
         */
        for(let i = 1; i < lines.length; i++) {
            const currentline = lines[i].split(";"); /*Atribuição da linha atual em um array.*/
            let obj = {}; /*Variável que conterá a JSON da respectiva linha.*/

            /*Loop responsável por atribuir o valor lido da linha, na chave correta da JSON.*/
            for(let j = 0; j < headers.length; j++) {
                obj[headers[j]] = currentline[j];
            }

            /*Inserção do objeto final no array de retorno.*/
            result.push(obj);
        }

        /*Chamada da função que torna o objeto user imutável.*/
        Object.freeze(result);

        return result;
    }
/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por ler o arquivo csv importado,  |
     * |chamar as função de conversão do arquivo em JSON,    |
     * |e realizar a validação das informações para enviar   |
     * |ao servidor.                                         |
     * =======================================================
     */
    function readFile() {
        /*Variável que contém o apontador para o arquivo lido.*/
        const file = document.getElementById("anexo7").files[0];
        /*Objeto do tipo FileReader, responsável por realizar a leitura de arquivos.*/
        let reader = new FileReader();

        /*Definição da função que será chamada quando o arquivo for lido.*/
        reader.onload = function(anexo7) {
            /*Chamada da função que torna o objeto user imutável.*/
            Object.freeze(anexo7);
            /*Chamada da função que converte o conteúdo lido do csv em um array de JSONs.*/
            const paymentAuthorizations = csvJSON(anexo7.target.result);
            /*Chamada da função que torna o objeto user imutável.*/
            Object.freeze(paymentAuthorizations);
            /*Chamada da função que realiza a validação dos daods, e os envia para o servidor.*/
            a7PaymentAuthorization(paymentAuthorizations);
        };

        /*Chamada da função responsável por ler o conteúdo do arquivo, usando o encoding ISO-8859-1.*/
        reader.readAsText(file, "ISO-8859-1");
    }


/*============================================================================*/
    /**
     * ========================================================
     * |Função responsável por tratar os dados do formulário e|
     * |do csv importado, para realizar o envio  para         | 
     * |o servidor gerar as autorizações de pagamentos.       |
     * ========================================================
     */
    function a7PaymentAuthorization(auxPaymentAuthorizations) {
        /*Chamada da função que torna o objeto user imutável.*/
        Object.freeze(auxPaymentAuthorizations);

        const financeiro     = document.getElementById("financeiro").value     /*Variável que contém os responsáveis.*/
        const administrativo = document.getElementById("administrativo").value /*Variável que contém os responsáveis.*/
        const presidente     = document.getElementById("presidente").value     /*Variável que contém os responsáveis.*/
        const gestao         = document.getElementById("gestao").value         /*Variável que contém os responsáveis.*/
        
        const anexo7Length = document.getElementById("anexo7Length").value; /*Variável que contém o número de linhas a serem usadas do csv.*/

        let responsaveis = [];          /*Variável que conterá os responsáveis pela autorização.*/
        let paymentAuthorizations = []; /*Variável que conterá as autorizações de pagamento.*/
        let line = 1;                   /*Variável que conterá o numéro da linha do anexo 7.*/
        let valor = "";                 /*Variável que conterla o valor da autorização de pagamento.*/

        /*Verificação se todos os responsáveis foram preenchidos, sendo obrigatório 3 deles.*/
        if((financeiro     != null && financeiro     != undefined && financeiro     != "") && 
           (administrativo != null && administrativo != undefined && administrativo != "") &&
           ((presidente    != null && presidente     != undefined && presidente     != "") || (gestao != null && gestao != undefined && gestao != ""))) {
            
            /*Atribuição do responsável Administrativo.*/
            responsaveis.push({responsavel: administrativo, cargo: "Administrativo"});
            /*Atribuição do responsável Financeiro.*/
            responsaveis.push({responsavel: financeiro, cargo: "Financeiro"});
            /*Verificação se o presidente foi preenchido.*/
            if(presidente != null && presidente != undefined && presidente != "") {
                /*Atribuição do responsável Presidente.*/
                responsaveis.push({responsavel: presidente, cargo: "Presidente"});   
            } else {
                /*Atribuição do responsável Gestão.*/
                responsaveis.push({responsavel: gestao, cargo: "Gestão"});
            }

        } else {
            alert("É necessário selecionar:\n Um responsável Administrativo,\n Um responsável Financeiro,\n Um responsável Presidente ou Gestão!");
            return;
        }

        /**
         * Loop responsável por realizar o tratamento dos campos lidos no arquivo csv
         * e atribui-los para o array de envio para o servidor.
         */
        for (let i = 0; i < anexo7Length; i++) {
            const element = auxPaymentAuthorizations[i]; /*Atribuição do objeto da linha atual.*/

            /*Verificação se o campo N° CI FINANCEIRO foi preenchido corretamente.*/
            if(element["N° CI FINANCEIRO"] == null || element["N° CI FINANCEIRO"] == undefined || element["N° CI FINANCEIRO"] == "") {
                alert("N° CI FINANCEIRO não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo TIPO DE MOVIMENTAÇÃO foi preenchido corretamente.*/
            if(element["TIPO DE MOVIMENTAÇÃO"] == null || element["TIPO DE MOVIMENTAÇÃO"] == undefined || element["TIPO DE MOVIMENTAÇÃO"] == "") {
                alert("TIPO DE MOVIMENTAÇÃO não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo MUNICÍPIO foi preenchido corretamente.*/
            if(element["MUNICÍPIO"] == null || element["MUNICÍPIO"] == undefined || element["MUNICÍPIO"] == "") {
                alert("MUNICÍPIO não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo UNIDADE foi preenchido corretamente.*/
            if(element["UNIDADE"] == null || element["UNIDADE"] == undefined || element["UNIDADE"] == "") {
                alert("UNIDADE não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo MÊS foi preenchido corretamente.*/
            if(element["MÊS"] == null || element["MÊS"] == undefined || element["MÊS"] == "") {
                alert("MÊS não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo DATA DO PAGAMENTO foi preenchido corretamente.*/
            if(element["DATA DO PAGAMENTO"] == null || element["DATA DO PAGAMENTO"] == undefined || element["DATA DO PAGAMENTO"] == "") {
                alert("DATA DO PAGAMENTO não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo N° DOCUMENTO FISCAL foi preenchido corretamente.*/
            if(element["N° DOCUMENTO FISCAL"] == null || element["N° DOCUMENTO FISCAL"] == undefined || element["N° DOCUMENTO FISCAL"] == "") {
                alert("N° DOCUMENTO FISCAL não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo DESCRIÇÃO DO PAGAMENTO foi preenchido corretamente.*/
            if(element["DESCRIÇÃO DO PAGAMENTO"] == null || element["DESCRIÇÃO DO PAGAMENTO"] == undefined || element["DESCRIÇÃO DO PAGAMENTO"] == "") {
                alert("DESCRIÇÃO DO PAGAMENTO não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo CLASSIFICAÇÃO DA DESPESA foi preenchido corretamente.*/
            if(element[" CLASSIFICAÇÃO DA DESPESA "] == null || element[" CLASSIFICAÇÃO DA DESPESA "] == undefined || element[" CLASSIFICAÇÃO DA DESPESA "] == "") {
                alert("CLASSIFICAÇÃO DA DESPESA não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo CONTA CONTÁBIL foi preenchido corretamente.*/
            if(element["CONTA CONTÁBIL"] == null || element["CONTA CONTÁBIL"] == undefined || element["CONTA CONTÁBIL"] == "") {
                alert("CONTA CONTÁBIL não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se o campo N° CONTRATO foi preenchido corretamente.*/
            if(element["N° CONTRATO"] == null || element["N° CONTRATO"] == undefined || element["N° CONTRATO"] == "") {
                alert("N° CONTRATO não foi preenchido corretamento na linha " + line.toString());
                break;
            }

            /*Verificação se algum campo de VALOR foi preenchido corretamente.*/
            if((element["VALOR DÉBITO"] == null || element["VALOR DÉBITO"] == undefined || element["VALOR DÉBITO"] == "")) {
                if((element["VALOR CRÉDITO"] == null || element["VALOR CRÉDITO"] == undefined || element["VALOR CRÉDITO"] == "")) {
                    if((element["OUTRAS MOVIMENTAÇÕES"] == null || element["OUTRAS MOVIMENTAÇÕES"] == undefined || element["OUTRAS MOVIMENTAÇÕES"] == "")) {
                        alert("VALOR não foi preenchido corretamento na linha " + line.toString());
                        break;
                    } else {
                        valor = element["OUTRAS MOVIMENTAÇÕES"];
                    }
                } else {
                    valor = element["VALOR CRÉDITO"];
                }
            } else {
                valor = element["VALOR DÉBITO"];
            }

            /*Inserção da nova autorização de pagamento lida no array de envio para o servidor.*/
            paymentAuthorizations.push({
                tipoDeMovimentacao    : element["TIPO DE MOVIMENTAÇÃO"],                /*Atributo que contém o tipo de movimentação.*/
                ciFinanceiro          : element["N° CI FINANCEIRO"],                    /*Atributo que contém o ci financeiro.*/
                unidade               : element["UNIDADE"],                             /*Atributo que contém a unidade.*/
                municipio             : element["MUNICÍPIO"],                           /*Atributo que contém o município.*/
                mes                   : element["MÊS"],                                 /*Atributo que contém o mês.*/
                dataPagamento         : element["DATA DO PAGAMENTO"],                   /*Atributo que contém a data do pagamento.*/
                descricaoDoPagamento  : element["DESCRIÇÃO DO PAGAMENTO"],              /*Atributo que contém o descrição do pagamento.*/
                documentoFiscal       : element["N° DOCUMENTO FISCAL"],                 /*Atributo que contém o documento fiscal.*/
                classificacaoDaDespesa: element[" CLASSIFICAÇÃO DA DESPESA "],          /*Atributo que contém o classificação da despesa.*/
                contaContabil         : element["CONTA CONTÁBIL"],                      /*Atributo que contém o conta contábil.*/
                contrato              : element["N° CONTRATO"],                         /*Atributo que contém o contrato.*/
                fontePagadora         : document.getElementById("fontePagadora").value, /*Atributo que contém o fonte pagadora.*/
                responsaveis          : responsaveis,                                   /*Atributo que contém os responsáveis..*/
                valor                 : valor,                                          /*Atributo que contém o valor.*/
            });

            /*Incremento do número da linha, para print de ERRO.*/
            line++;
        }

        /*Chamada da função que torna o objeto user imutável.*/
        Object.freeze(paymentAuthorizations);

        /**
         * Chamada axios para a rota insertPaymentAuthorization para inserir uma nova autorização de pagamento no sistema.
         */
        axios.post("/insertPaymentAuthorization", {paymentAuthorization: paymentAuthorizations})
            .then((response) => {
                /*Chamada da função que torna o objeto user imutável.*/
		        Object.freeze(response);
                /* Tratamento do retorno.*/
                if (response.data.status == "success") {
                    /*Alerta o usuário com a mensagem do servidor.*/
                    alert(response.data.msg);
                    window.open("/downloadPdf?path="+response.data.data, "_blank");
                }
                else{
                    /*Atribuição da mensagem de retorno do servidor.*/
                    let msg = response.data.msg;
                    /*Verificação se foi enviada mais de uma mensagem.*/
                    if(Array.isArray(response.data.msg)) {
                        /*Atribuição de string vazia a variável.*/
                        msg = "";
                        /*Loop responsável por concatenar todas as mensagens enviadas.*/
                        for (const i in response.data.msg) {
                            msg += response.data.msg[i].msg;
                            msg += "\n";
                        }
                    } 
                    /*Alertar o usuario, caso tenha ocorrido algum erro no servidor*/
                    alert(msg);
                }
            })
            .catch((error) => {
                /*Tratamento de erro.*/
                alert("ERROR");
                console.log(error);
            });
    }
/*============================================================================*/
</script>

</html>