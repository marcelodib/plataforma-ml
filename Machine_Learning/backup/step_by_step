========================================================================
======================PREPARAR AMBIENTE=================================
sudo apt-get update 

sudo apt-get upgrade

sudo apt update 

sudo apt upgrade

sudo apt-get install build-essential 

sudo apt-get install cmake git unzip zip

sudo apt-get install python-dev python3-dev python-pip python3-pip

sudo apt-get install linux-headers-$(uname -r)

sudo apt-get autoremove

sudo apt-get autoclean
========================================================================
=====================ARRUMANDO ERROS DO PIP=============================
hash -d pip

sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall

sudo python -m pip uninstall pip
sudo apt remove python-pip
sudo whereis pip

wget https://bootstrap.pypa.io/get-pip.py -O /tmp/get-pip.py
sudo python3 /tmp/get-pip.py
pip install --user pipenv
pip3 install --user pipenv
echo "PATH=$HOME/.local/bin:$PATH" >> ~/.profile
source ~/.profile
whereis pip

========================================================================
=====================BAIXANDO DEPENDENCIAS==============================
pip install -U --user pip six numpy wheel mock

pip3 install -U --user pip six numpy wheel mock

pip install -U --user keras_applications

pip3 install -U --user keras_applications

pip install -U --user keras_preprocessing

pip3 install -U --user keras_preprocessing

========================================================================
=====================INSTALL BAZEL 0.24.1==============================
cd ~/

wget https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-installer-linux-x86_64.sh

chmod +x bazel-0.24.1-installer-linux-x86_64.sh

./bazel-0.24.1-installer-linux-x86_64.sh --user

echo 'export PATH="$PATH:$HOME/bin"' >> ~/.bashrc

source ~/.bashrc

sudo ldconfig
========================================================================
=====================CASO DE ERRO NO BAZEL 0.24.1=======================
cd ~/

wget https://github.com/bazelbuild/bazel/releases/download/0.17.2/bazel-0.17.2-installer-linux-x86_64.sh

chmod +x bazel-0.17.2-installer-linux-x86_64.sh

./bazel-0.17.2-installer-linux-x86_64.sh --user

echo 'export PATH="$PATH:$HOME/bin"' >> ~/.bashrc

source ~/.bashrc

sudo ldconfig

========================================================================
=====================INSTALL TENSORFLOW 1.13.1===========================
sudo pip3 install tensorflow==1.13.1

sudo pip install tensorflow==1.13.1

========================================================================
========================LABEL IMAGE=====================================

git clone https://github.com/tzutalin/labelImg

sudo apt-get install pyqt5-dev-tools

sudo pip3 install lxml

make qt5py3

python3 labelImg.py

========================================================================
========================ORGANIZAR DATASET===============================

CRIAR DIRETORIO images, SE PARARAR DATASET EM test E train.

========================================================================
========================BAIXAR xml_to_csv.py============================

https://github.com/datitran/raccoon_dataset/blob/master/xml_to_csv.py


def main():
    for directory in ['train','test']:
        image_path = os.path.join(os.getcwd(), 'images/{}'.format(directory))
        xml_df = xml_to_csv(image_path)
        xml_df.to_csv('data/{}_labels.csv'.format(directory), index=None)
        print('Successfully converted xml to csv.')

python3 xml_to_csv.py

========================================================================
========================BAIXAR generate_tfrecord.py=====================

https://github.com/datitran/raccoon_dataset/blob/master/generate_tfrecord.py


# TO-DO replace this with label map
def class_text_to_int(row_label):
    if row_label == 'name':
        return 1
    else:
        None

========================================================================
========================BAIXAR tensorflow models========================

git clone https://github.com/tensorflow/models.git


========================================================================
========================BAIXAR DEPENDENCIAS=============================
sudo apt-get install protobuf-compiler python-pil python-lxml
sudo pip install jupyter
sudo pip install matplotlib

========================================================================
========================UPDATE PROTOBUF=================================
curl -OL https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip

unzip protoc-3.6.1-linux-x86_64.zip -d protoc3

sudo mv protoc3/bin/* /usr/local/bin/

sudo mv protoc3/include/* /usr/local/include/

sudo chown $USER /usr/local/bin/protoc

sudo chown -R $USER /usr/local/include/google

sudo ldconfig


========================================================================
========================INSTALL COCO API================================

bash object_detection/dataset_tools/create_pycocotools_package.sh /pycocotools

python3 setup.py sdist

(cd slim && python setup.py sdist)

========================================================================
========================PREPARAR AMBIENTE PARA TREINO===================

# From tensorflow/models/researchs
protoc object_detection/protos/*.proto --python_out=.

# From tensorflow/models/researchs
export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim

python3 generate_tfrecord.py --csv_input=data/train_labels.csv --output_path=data/train.record --image_dir=images/train

python3 generate_tfrecord.py --csv_input=data/test_labels.csv --output_path=data/test.record --image_dir=images/test

python3 train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssd_mobilenet_v2_quantized_300x300_coco.config


========================================================================
========================EXPORT TO GRAPH=================================
python3 export_inference_graph.py \
    --input_type image_tensor \
    --pipeline_config_path legacy/training/ssd_mobilenet_v1_pets.config \
    --trained_checkpoint_prefix training/model.ckpt-94451 \
    --output_directory placas_inference_graph \
    --input_arrays=normalized_input_image_tensor \
    --add_postprocessing_op=true

========================================================================
========================EXPORT TO TFLITE GRAPH==========================
python3 export_tflite_ssd_graph.py \
--input_type=image_tensor \
--pipeline_config_path=legacy/training/ssd_mobilenet_v2_quantized_300x300_coco.config \
--trained_checkpoint_prefix=legacy/training/model.ckpt-20973 \
--output_directory=legacy/tflite \
--add_postprocessing_op=true \
--max_detections 10

========================================================================
========================CONVERT TO .TFLITE==============================
tflite_convert \
  --graph_def_file=tflite_graph.pb \
  --output_file=detect.tflite \
  --output_format=TFLITE \
  --input_arrays=normalized_input_image_tensor \
  --input_shapes=1,300,300,3 \
  --inference_type=QUANTIZED_UINT8 \
  --mean_values=128 \
  --std_dev_values=128 \
  --change_concat_input_ranges=false \
  --output_arrays='TFLite_Detection_PostProcess','TFLite_Detection_PostProcess:1','TFLite_Detection_PostProcess:2','TFLite_Detection_PostProcess:3' \
  --allow_custom_ops


tflite_convert \
  --graph_def_file=tflite_graph.pb \
  --output_file=detect2.tflite \
  --output_format=TFLITE \
  --input_arrays=normalized_input_image_tensor \
  --input_shapes=1,300,300,3 \
  --inference_type=FLOAT \
  --output_arrays='TFLite_Detection_PostProcess','TFLite_Detection_PostProcess:1','TFLite_Detection_PostProcess:2','TFLite_Detection_PostProcess:3' \
  --allow_custom_ops










